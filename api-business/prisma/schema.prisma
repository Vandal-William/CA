// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  comments   Comment[]
  tempcomments   TempComment[]
  userSubscription UserSubscription[]
}

model Comment {
  id        String     @id @default(uuid())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  publicationId String
}

model TempComment {
  id        String     @id @default(uuid())
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  publicationId String
}

model Subscription {
  id          String     @id @default(uuid())
  name        String
  description String
  amount      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userSubscription UserSubscription[]
  benefit Benefit[]
}

model UserSubscription {
  id            String       @id @default(uuid())
  userId        String
  subscriptionId String
  status        SubscriptionStatus
  reason        SubscriptionReason
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  @@unique([userId, subscriptionId])
  user          User         @relation(fields: [userId], references: [id])
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
}

model Benefit {
  id           String       @id @default(uuid())
  description  String
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Revenue {
  id        String     @id @default(uuid())
  amount    Float
  date      DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

  enum SubscriptionStatus {
    Active
    Inactive
  }

  enum SubscriptionReason {
    PaymentValidated
    PaymentDefault
    Unsubscription
  }